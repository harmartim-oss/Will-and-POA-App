"""
Email Service
Handles sending documents via email using SendGrid
"""

import os
import logging
import base64
from typing import Dict, List, Optional, Any
from datetime import datetime

logger = logging.getLogger(__name__)

# Optional SendGrid import with fallback
try:
    from sendgrid import SendGridAPIClient
    from sendgrid.helpers.mail import Mail, Attachment, FileContent, FileName, FileType, Disposition
    SENDGRID_AVAILABLE = True
except ImportError:
    SENDGRID_AVAILABLE = False
    logger.warning("SendGrid not available - email functionality will be simulated")

class EmailService:
    """
    Service for sending documents via email
    """
    
    def __init__(self):
        """Initialize email service"""
        self.api_key = os.getenv('SENDGRID_API_KEY')
        self.from_email = os.getenv('FROM_EMAIL', 'noreply@ontariowills.com')
        self.from_name = os.getenv('FROM_NAME', 'Ontario Wills & POA')
        
        if SENDGRID_AVAILABLE and self.api_key:
            self.client = SendGridAPIClient(self.api_key)
            logger.info("Email service initialized with SendGrid")
        else:
            self.client = None
            logger.warning("Email service in simulation mode (no SendGrid API key)")
    
    def send_document_email(
        self,
        to_email: str,
        subject: str,
        document_content: bytes,
        document_name: str,
        message_body: str = None,
        document_type: str = 'application/pdf'
    ) -> Dict[str, Any]:
        """
        Send document via email
        
        Args:
            to_email: Recipient email address
            subject: Email subject
            document_content: Document binary content
            document_name: Document filename
            message_body: Optional email body text
            document_type: MIME type of document
            
        Returns:
            Success status and details
        """
        try:
            if not self.client:
                # Simulation mode
                logger.info(f"[SIMULATION] Would send email to {to_email}")
                logger.info(f"[SIMULATION] Subject: {subject}")
                logger.info(f"[SIMULATION] Attachment: {document_name} ({len(document_content)} bytes)")
                
                return {
                    'success': True,
                    'message': 'Email simulated successfully (no SendGrid API key configured)',
                    'simulation': True,
                    'details': {
                        'to': to_email,
                        'subject': subject,
                        'attachment': document_name,
                        'size': len(document_content)
                    }
                }
            
            # Create email message
            default_body = f"""
Dear Client,

Please find attached your legal document: {document_name}

This document has been generated by the Ontario Wills & Power of Attorney Creator system.

Important Notes:
- Please review this document carefully
- Consult with a legal professional before executing
- Store this document in a secure location
- Do not share sensitive information

If you have any questions, please contact us.

Best regards,
Ontario Wills & POA Team
            """
            
            message = Mail(
                from_email=(self.from_email, self.from_name),
                to_emails=to_email,
                subject=subject,
                html_content=message_body or default_body.replace('\n', '<br>')
            )
            
            # Add document as attachment
            encoded_content = base64.b64encode(document_content).decode()
            
            attachment = Attachment(
                FileContent(encoded_content),
                FileName(document_name),
                FileType(document_type),
                Disposition('attachment')
            )
            message.attachment = attachment
            
            # Send email
            response = self.client.send(message)
            
            logger.info(f"Email sent to {to_email} - Status: {response.status_code}")
            
            return {
                'success': True,
                'message': 'Email sent successfully',
                'status_code': response.status_code,
                'details': {
                    'to': to_email,
                    'subject': subject,
                    'attachment': document_name
                }
            }
            
        except Exception as e:
            logger.error(f"Error sending email to {to_email}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def send_notification_email(
        self,
        to_email: str,
        subject: str,
        message_body: str,
        template_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Send notification email without attachment
        
        Args:
            to_email: Recipient email address
            subject: Email subject
            message_body: Email body (HTML)
            template_id: Optional SendGrid template ID
            
        Returns:
            Success status and details
        """
        try:
            if not self.client:
                # Simulation mode
                logger.info(f"[SIMULATION] Would send notification to {to_email}")
                logger.info(f"[SIMULATION] Subject: {subject}")
                
                return {
                    'success': True,
                    'message': 'Notification simulated successfully',
                    'simulation': True
                }
            
            message = Mail(
                from_email=(self.from_email, self.from_name),
                to_emails=to_email,
                subject=subject,
                html_content=message_body
            )
            
            if template_id:
                message.template_id = template_id
            
            response = self.client.send(message)
            
            logger.info(f"Notification sent to {to_email} - Status: {response.status_code}")
            
            return {
                'success': True,
                'message': 'Notification sent successfully',
                'status_code': response.status_code
            }
            
        except Exception as e:
            logger.error(f"Error sending notification to {to_email}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def send_bulk_email(
        self,
        recipients: List[str],
        subject: str,
        message_body: str
    ) -> Dict[str, Any]:
        """
        Send email to multiple recipients
        
        Args:
            recipients: List of recipient email addresses
            subject: Email subject
            message_body: Email body
            
        Returns:
            Success status and details
        """
        results = []
        
        for recipient in recipients:
            result = self.send_notification_email(
                to_email=recipient,
                subject=subject,
                message_body=message_body
            )
            results.append({
                'email': recipient,
                'success': result['success']
            })
        
        success_count = sum(1 for r in results if r['success'])
        
        return {
            'success': success_count > 0,
            'total': len(recipients),
            'successful': success_count,
            'failed': len(recipients) - success_count,
            'results': results
        }

# Global instance
_email_service = None

def get_email_service() -> EmailService:
    """Get or create email service instance"""
    global _email_service
    if _email_service is None:
        _email_service = EmailService()
    return _email_service
